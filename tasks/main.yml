---

- set_fact:
    ansible_control_machine_users: "{{lookup('pipe', 'lslogins --noheadings --raw | awk ' + '{if ($1 >= 1000 && $1 < 65534) print $2}'|quote).split('\n')}}"
    ansible_local_user: "{{lookup('env', 'USER')}}"
  check_mode: True
  tags: always

  #######################################
  # noadmin mode
  #######################################
- name: configure existing account (users_nodadmin=True)
  block:

  # configure your user
  - name: gather ansible_env facts
    setup: gather_subset=!all
  - set_fact:
      users:
        # this is set to remote user (not affected by --user)
        # NOTE: requires fact gathering
        - name: "{{ansible_env['USER']}}"
          # shell: "/bin/zsh"
          dotfiles_dir: "dotfiles"
          vim_dir: ".vim"
    check_mode: True

  - debug: var=ansible_env['USER']
  - include_tasks: ssh_install_pub_keys.yml
    when: ansible_connection != 'local'
    with_items: "{{users}}"
    loop_control:
      loop_var: unix_user
    vars:
      usergroup: ""

  - import_tasks: ssh_config.yml

  - import_tasks: dotfiles.yml
    when:
      - users_noadmin
      - ansible_connection != 'local'

  when: users_noadmin

  #########################################
  # installing users basic pkgs
  #########################################
- name: install users basic packages (default mode; users_nopkgs=False)
  block:
  #  When repos' fqdn are returning AAAA records and there are no IPV6
  #  connectivity, pycurl doesn't fallback on ipv4. Not tested when IPV6INIT=no.
  - name: force yum on RedHat <7 and derivatives to use ipv4
    lineinfile:
      line: "ip_resolve=4"
      insertafter: "^gpgcheck*"
      dest: /etc/yum.conf
      state: present
    become: yes
    when:
      - ansible_distribution_major_version is defined
      - ansible_distribution_major_version|int < 7
      - not users_nopkgs

  - name: install sudo, rsync and zsh packages (required for this role)
    package: name={{item}} state=latest
    become: yes
    with_items:
        - zsh
        - sudo
        - rsync
        # identical packaeg name on both RedHat and Debian
        - rxvt-unicode-256color
    when:
       # - ansible_distribution_major_version is defined

  - name: install X11 xauth on RedHat derivatives
    package: name=xorg-x11-xauth state=latest
    become: yes
    when:
       # - ansible_distribution_major_version is defined
       - ansible_os_family == "RedHat"

  - name: install X11 xauth on Debian derivatives
    package: name=xauth state=latest
    become: yes
    when:
       # - ansible_distribution_major_version is defined
       - ansible_os_family == "Debian"

  when:
    - not users_noadmin
    - not users_nopkgs
  tags: pkgs

  #########################################
  # adding users by groups (default mode)
  #########################################
- name: add users by unix group (default mode; users_noadmin=False)
  block:
  - name: gather ansible_usergroups facts
    usergroups:

    # add unix group for usergroup
    # manage users for each usersgroups
  - include_tasks: groupadd.yml
    with_items: "{{usergroups|default(omit)}}"
    loop_control:
      loop_var: usergroup
    tags:
      - accounts

  - debug: msg="Unix group '{{usergroup['key']}}' will be removed"
    with_dict: "{{ansible_usergroups|default({})}}"
    when: usergroups is defined and groupdel_debug and usergroup.key not in users_exclusive_usergroups_exceptions and usergroup.key not in usergroups|map(attribute='name')|list
    loop_control:
      loop_var: usergroup

  when: not users_noadmin
  tags: useradd

  ###############################################################
  # removing users by groups (when users_exclusive_groupmembers)
  ###############################################################
- name: removing users by groups
  block:

  - include_tasks: groupdel.yml
    with_dict: "{{ansible_usergroups|default({})}}"
    when: usergroup.key not in users_exclusive_usergroups_exceptions and usergroup.key not in usergroups|map(attribute='name')|list
    loop_control:
      loop_var: usergroup

  rescue:
    # This action is dangerous... ask for user prompt
    - pause:
        prompt: |
         "The variable 'usergroups' is undefined, and set
         'users_exclusive_usergroups == yes'. Please confirm you want to
         delete all unix groups. Press return to continue.
         Press Ctrl+c and then 'a' to abort"

    - name: delete unix group '{{usergroup['key']}}
      group:
        name: "{{usergroup['key']}}"
        state: absent
      with_dict: "{{ansible_usergroups|default({})}}"
      when: item.key not in users_exclusive_usergroups_exceptions

  when: not users_noadmin and users_exclusive_usergroups
  tags: userdel
