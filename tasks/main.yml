---

- set_fact:
    # list of user accounts found on control machine
    a_control_machine_users: "{{lookup('pipe', 'lslogins --noheadings --raw | awk ' + '{if ($1 >= 1000 && $1 < 65534) print $2}'|quote).split('\n')}}"
    # user invoking ansible on control machine
    a_cm_user: "{{lookup('env', 'USER')}}"
  check_mode: True
  tags: always

#########################################
# installing users basic pkgs
#########################################
- name: install users basic packages (default mode; users_nopkgs=False)
  block:
  #  When repos' fqdn are returning AAAA records and there are no IPV6
  #  connectivity, pycurl doesn't fallback on ipv4. Not tested when IPV6INIT=no.
  - name: force yum on RedHat <7 and derivatives to use ipv4 (set ip_resolve=4)
    lineinfile:
      line: "ip_resolve=4"
      insertafter: "^gpgcheck*"
      dest: /etc/yum.conf
      state: present
    become: yes
    when:
      - ansible_facts['distribution_major_version'] is defined
      - ansible_facts['distribution_major_version']|int < 7
      - not users_nopkgs

  - name: install sudo, rsync and zsh packages (required for this role)
    package: name={{item}} state=latest
    become: yes
    loop:
        - zsh
        - sudo
        - rsync
        - make
        - xsel

  - name: install vim and X11 xauth on RedHat derivatives
    package: name={{item}} state=latest
    loop:
      - xorg-x11-xauth
      - vim-enhanced.x86_64
    become: yes
    when:
       - ansible_facts['os_family'] == "RedHat"

  - name: install X11 xauth on Debian derivatives
    package: name=xauth state=latest
    become: yes
    when:
       - ansible_facts['os_family'] == "Debian"

  when:
    - not users_nopkgs
  tags: pkgs

#########################################
# adding users by groups (default mode)
#########################################
- name: add users by unix group (default mode; users_noadmin=False)
  block:
    - name: gather a_usergroups facts
      usergroups:
      # add unix group for usergroup
      # manage users for each usersgroups
    - include_tasks: groupadd.yml
      loop: "{{usergroups}}"
      loop_control:
        loop_var: usergroup
  tags: groupadd

###############################################################
# removing users by groups (when users_exclusive_groupmembers)
###############################################################
- name: removing users by groups
  block:

  - include_tasks: groupdel.yml
    with_dict: "{{ansible_usergroups|default({})}}"
    when:
      - usergroup.key not in users_exclusive_usergroups_exceptions
      - usergroup.key not in usergroups|map(attribute='name')|list
    loop_control:
      loop_var: usergroup

  rescue:
    # This action is dangerous... ask for user prompt
    - pause:
        prompt: |
         "The variable 'usergroups' is undefined, and set
         'users_exclusive_usergroups == yes'. Please confirm you want to
         delete all unix groups. Press return to continue.
         Press Ctrl+c and then 'a' to abort"

    - name: delete unix group '{{usergroup['key']}}
      group:
        name: "{{usergroup['key']}}"
        state: absent
      with_dict: "{{ansible_usergroups|default({})}}"
      when: item.key not in users_exclusive_usergroups_exceptions

  when: users_exclusive_usergroups
  tags: groupdel
