---

- name: set 'a_cm_user' var
  set_fact:
    # user invoking ansible on the control machine
    a_cm_user: "{{lookup('env', 'USER')}}"
  check_mode: True
  when: a_cm_user is not defined
  tags: always

# Using inventory defined input thus allowing inventory specific.
#   3 senarios are possible:
#     1. usergroups is defined and usergroup is defined -> running with
#       role main.yml as entrypoint
#     2. usergroups is defined and usergroup is undefined -> running with
#       role account.yml as entrypoint.
#     3. usergroups is undefined -> running with no inventory config
#       meaning we only configure current ansible remote_user account.

- name: gather "ansible_facts['env']" facts
  setup: gather_subset=!all
  when:
    # - usergroup is not defined
    - ansible_facts['env'] is not defined
  check_mode: True
  tags: always

- name: set 'users' var - inventory defined usergroups
  block:
    - name: set 'users' from 'usergroup' - running with "main.yml" as entrypoint
      set_fact:
        users: "{{usergroup['users']}}"
        # users: "{{usergroup['users']|selectattr('name', 'eq', ansible_facts['env']['USER'])|list}}"
      when:
        - usergroup is defined

    # todo: set users searching recursively in usergroups
    - name: set 'users' from first 'usergroups' - running with 'account.yml' as entrypoint
      set_fact:
        users: "{{usergroups[0]['users']|selectattr('name', 'eq', ansible_facts['env']['USER'])|list}}"
        usergroup:
          name: "{{usergroups[0]['name']}}"
      when:
      - usergroup is not defined
  when:
    - usergroups is defined
  check_mode: True
  tags: always

# configuring current user only
- name: set 'users' (fallback method) - running from 'account.yml' as entrypoint
  set_fact:
    users:
      # This is set to remote_user (not affected by --user) Requires fact gathering.
      - name: "{{ansible_facts['env']['USER']}}"
        vim_dir: ".vim"
        # Required by several tasks. Defaults to 'USER' env variable.
        # fixme: detect the real user gid
    usergroup:
        name: "{{ansible_facts['env']['USER']}}"
  when:
    - usergroups is not defined
  check_mode: True
  tags: always

# - debug: var=usergroups
# - debug: var=usergroup
# - debug: var=users

# Try installing 'ansible_domain' and 'id_rsa.pub' pub keys searching paths
# using 'first_found' lookups.
- include_tasks: ssh_install_pub_keys.yml
  when: ansible_connection != 'local'
  loop: "{{users}}"
  loop_control:
    loop_var: user
  vars:
    cm_user: "{{(ansible_facts['env']['USER'] == 'root') |ternary(a_cm_user, users_usermap.get(user['name'], user['name']))}}"

# ssh_config templating
# - include_tasks: ssh_config.yml

- include_tasks: account_dotfiles.yml
