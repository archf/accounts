---

# Complete users list may come either:
#   - from ansible inventory
#   - from a standalone 'users.yml' file. Useful for handling serveral
#   usergroups with each their own file.
- name: set "users" var from "users.yml" - "{{usergroup['name']}}"
  include_vars: "{{users_file}}"
  when:
    - "'users' not in usergroup.keys()|list"
  check_mode: True
  tags: always
  # vars:
  #   users_file: "{{groups_dir}}/{{usergroup['name']}}/users.yml"

- name: set users vars from inventory
  set_fact:
    users: "{{usergroup['users']}}"
  when:
    - usergroup is defined
    - "'users' in usergroup.keys()|list"
    # - not (users_file is exists)
  check_mode: True
  tags: always

  # # vars:
  # #   users_file: "{{groups_dir}}/{{usergroup['name']}}/users.yml"
# - include_tasks: set_users_var_from_inventory.yml

# useful when you do not have control over '/etc/skel' template.
- name: create directories in '/etc/skel'
  file:
    owner: "root"
    group: "root"
    path: "/etc/skel/{{item}}"
    state: directory
    mode: 0700
    # ignore errors when invoking with ansible-playbook with '-C|--check'
  # ignore_errors: true
  become: yes
  loop: "{{users_defaults['skel']}}"
  when: users_gen_skel
  tags:
    - skel

##############################
# usegroups & users
##############################
- name: adding unix usergroup to host
  group: name={{usergroup['name']}} state=present gid={{usergroup['gid']|default(omit)}}

# - debug: var=usergroup
# - debug: var=usergroups

- name: template {{usergroup['name']}} sudoers entry
  template:
    src: sudoers.j2
    dest: /etc/sudoers.d/{{usergroup['name']}}
    owner: root
    group: root
    validate: "visudo -cf %s"
  become: yes
  when:
    - usergroup['sudo'] is defined and usergroup['sudo']|length > 0
  vars:
    sudoers_rule_list: "{{usergroup['sudo']}}"
    sudoers_user_alias: "%{{usergroup['name']}}"
  tags: sudoers

# TODO: password and priv key management
#   - name: generate a random password hash per managed user
#   - name: send new private ssh key name by email
#   - name: send new key passphrase in separate mail

- name: adding user accounts (and register new_users fact)
  user:
    # account username
    name: "{{item['name']}}"
    # full name
    comment: "{{item['comment']|default(omit)}}"
    state: "{{item['state']|default(users_defaults['state'])}}"
    shell: "{{item['shell']|default(users_defaults['shell'])}}"
    system: "{{item['system']|default(users_defaults['system'])}}"
    # add user to comma-delimited list of groups
    groups: "{{item['groups']|join(',') ~ ',' ~ usergroup['name'] if item.groups is defined else usergroup['name']}}"
    append: "{{item['append']|default(users_defaults['append'])}}"
    # sets the user's primary group
    # this will only set the users' gid, group name is passed to '-g' options of
    # useradd
    group: "{{usergroup['name']|default(omit)}}"
    password: "{{item['password']|default(usergroup['password'])|password_hash('sha512') if (item.password is defined or usergroup['password'] is defined) else omit}}"
    update_password: "{{item['update_password']|default(users_defaults.update_password)}}"
    createhome: "{{item['createhome']|default(users_defaults['createhome'])}}"
    home: "{{item['homedir']|default(users_defaults['homedir_root'] + '/' + item['name'])}}"
    # home: "{{item['homedir']|default(users_defaults['homedir_root'])}}/{{item['name']}}"
    move_home: "{{item['move_home']|default(users_defaults['move_home'])}}"
    non_unique: "{{item['non_unique']|default(users_defaults['non_unique'])}}"
    # ssh
    ssh_key_passphrase: "{{item['ssh_key_passphrase']|default(users_defaults.ssh_key_passphrase)}}"
    ssh_key_type: "{{item['ssh_key_type']|default(users_defaults['ssh_key_type'])}}"
    ssh_key_bits: "{{item['ssh_key_bits']|default(users_defaults['ssh_key_bits'])}}"
    # keyname is forged in order to get <username>.<domain>
    # for ansible_facts['domain'] to return proper value, '/etc/hosts' must be
    # configured first wiht something like
    # 127.0.1.1       <hostname>.<domain> <hostname>
    # for ansible_facts['domain'] to return the domain.
    ssh_key_file: ".ssh/{{item['name']}}.{{ansible_facts['domain']|default(ansible_facts['hostname'])}}"
    # keys are only generated on specified host groups
    generate_ssh_key: "{{users_generate_ssh_keys}}"
  loop: "{{users}}"
  register: new_users
  ignore_errors: "{{users_usermod_ignore_errors}}"
  tags:
    - accounts
    - skel

##############################
# password expiration
##############################

- name: set new users password expiration
  block:
  # passwd implentation seems different on RedHat vs Debian.
  # On centos 7.* for instance we get:
  #       passwd: Cannot mix one of - l, -u, -d, -S and one of -i, -n, -w, -x.
  # When mixing --expire and --inactive options.
  # --expire is Available to root only.

  # - name: force expiration of new user's password on RedHat derivative nodes
  #   command: passwd --expire {{item.item['name']}}
  #   loop: "{{new_users['results']}}"
  #   when: ansible_facts['os']_family != "RedHat" and item.changed

  - name: force password expiration for new users - Debian derivatives
    command: passwd --expire {{item.item['name']}}
    # command: passwd --expire {{item['item']['name']}} --inactive {{item['item']['inactive']|default(users_defaults['inactive'])}}
    loop: "{{new_users['results']}}"
    when: ansible_facts['os']_family == "Debian" and item.changed

  when: users_expire_passwords

# run ansible with "-e 'groupadd_debug=True'
- import_tasks: groupadd_debug.yml
  when: groupadd_debug

##############################
# ssh keys
##############################

- name: ssh keys generation and rotation
  block:

  - name: create local directories for keyrings in "{{groups_dir}}/{{usergroup['name']}}"
    file:
      path: "{{groups_dir}}/{{usergroup['name']}}/keys"
      state: directory
    become: no
    delegate_to: localhost
    run_once: yes
    when: users_generate_ssh_keys

  # fetch keys previously generated by the user module
  - include_tasks: ssh_fetch_keys.yml
    when: users_generate_ssh_keys

    # gather various ssh facts
    #   - active_ssh_keys
    #   - managed_ssh_keys
    #   - new_ssh_keys
  - include_tasks: ssh_setup.yml
    when: users_generate_ssh_keys or users_rotate_ssh_keys

  - name: create directories for keyrings in "{{groups_dir}}/{{usergroup['name']}}"
    file:
      path: "{{groups_dir}}/{{usergroup['name']}}/old_keys"
      state: directory
    become: no
    delegate_to: localhost
    run_once: yes
    when: users_rotate_ssh_keys

    # cleanup unmanaged keys and perform ssh_rotation
  - include_tasks: ssh_rotate_keys.yml
    when: users_rotate_ssh_keys

    # generate ssh keys (for each user using ssh-keygen)
  - include_tasks: ssh_keygen.yml
    when: users_generate_ssh_keys

    # fetch missing pub keys again prior to propagation of public keys
  - include_tasks: ssh_fetch_keys.yml
    when: users_generate_ssh_keys and generate_new_ssh_keys is changed

  tags: ssh-private-keys

###########################################################
# account configuration (ssh_authorized_keys and dotfiles)
###########################################################
- import_tasks: account.yml
  tags: account

#############################
# users deletion
#############################

# Delete all unmanaged users. We can only put this here to avoid reparsing
# file "{{groups_dir}}/{{usergroup['name']}}/users.yml" a second time.

- name: unmanaged users deletion
  block:
  - name: delete unmanaged users
    # user:
    debug:
      msg: "deleted user is {{item}}"
    #   # account name
    #   name: "{{item}}"
    #   # userdel --remove behavior (Files in the user's home directory will be
    #   # removed along with the home directory itself and the user's mail spool)
    #   remove: yes
    loop: "{{ansible_usergroups[usergroup['name']]['users']}}"
    # ignore errors when usergroup['name'] doesn't exist (no unix group => dangling users)
    ignore_errors: yes
    when:  (users_exclusive_groupmembers and item not in users|map(attribute='name')|list)

#     delete dangling users
#   rescue:
#     - debug:
#         var: userdel_errors
