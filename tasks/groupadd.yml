---

# NOTE: you won't get here if users_noadmin=yes

- name: adding unix usergroup
  group: name={{usergroup['name']}} state=present gid={{usergroup['gid']|default(omit)}}

- name: source {{usergroup['name']}} profile
  include_vars: "{{groups_dir}}/{{usergroup['name']}}/users.yml"

- name: template {{usergroup['name']}} sudoers entry
  template:
    src: sudoers.j2
    dest: /etc/sudoers.d/{{usergroup['name']}}
    owner: root
    group: root
    validate: "visudo -cf %s"
  when: usergroup.sudoers is defined

- name: create directories for keyrings in '{{groups_dir}}/{{usergroup['name']}}
  file:
    path: "{{groups_dir}}/{{usergroup['name']}}/{{item}}"
    state: directory
  with_items:
      - old_keys
      - keys
  delegate_to: localhost
  run_once: yes
  become: no

# todo:
#   - name: generate a random password hash per managed user
#   - name: send new private ssh key name by email
#   - name: send new key passphrase in separate mail

# useful when you do not have control over '/etc/skel' template.
- name: scaffold '/etc/skel'
  file:
    owner: "root"
    group: "root"
    path: "/etc/skel/{{item}}"
    state: directory
    mode: 0700
  # ignore errors when invoking with ansible-playbook with '-C'
  # ignore_errors: true
  with_items: "{{usergroupusers_defaults['skel']}}"
  when: users_gen_skel

- name: adding user accounts (and register new_users facts)
  user:
    # account username
    name: "{{item['name']}}"
    # full name
    comment: "{{item['comment']|default(omit)}}"
    state: "{{item['state']|default(users_defaults['state'])}}"
    shell: "{{item['shell']|default(users_defaults['shell'])}}"
    system: "{{item['system']|default(users_defaults['system'])}}"

    # add user to comma-delimited list of groups
    groups: "{{item['groups']|join(',') ~ ',' ~ usergroup['name'] if item.groups is defined else usergroup['name']}}"
    append: "{{item['append']|default(users_defaults['append'])}}"

    # sets the user's primary group
    # this will only set the users' gid, group name is passed to '-g' options of
    # useradd
    group: "{{usergroup['name'] if not users_noadmin else omit}}"

    password: "{{item['password']|default(usergroup_defaults['password'])|password_hash('sha512') if (item.password is defined or usergroup_defaults['password'] is defined) else omit}}"
    update_password: "{{item['update_password']|default(users_defaults.update_password)}}"

    createhome: "{{item['createhome']|default(users_defaults['createhome'])}}"
    home: "{{item['home']|default(users_defaults['home'])}}/{{item['name']}}"
    move_home: "{{item['move_home']|default(users_defaults.move_home)}}"
    non_unique: "{{item['non_unique']|default(users_defaults.non_unique)}}"

    # ssh
    ssh_key_passphrase: "{{item['ssh_key_passphrase']|default(users_defaults.ssh_key_passphrase)}}"
    ssh_key_type: "{{item['ssh_key_type']|default(users_defaults.ssh_key_type)}}"
    ssh_key_bits: "{{item['ssh_key_bits']|default(users_defaults.ssh_key_bits)}}"

    # keyname is forged in order to get <username>.<domain>
    # for ansible_domain to return proper value, '/etc/hosts' must be
    # configured first wiht something like
    # 127.0.1.1       <hostname>.<domain> <hostname>
    # for ansible_domain to return the domain.
    ssh_key_file: "['ssh/{{item['name']}}.{{ansible_domain|default(ansible_hostname)}}"

    # keys are only generated on specified host groups
    generate_ssh_key: "{{users_generate_ssh_keys}}"
  with_items: "{{users}}"
  register: new_users

# Personalise homedir with directories, '/etc/skel' could have been use but this
# is useful when you do not have control over '/etc/skel' template. See
# 'users_skel_homedirs' in 'defaults/main.yml'.
- name: skel created home directories
  file:
    owner: "{{item[0]['name']}}"
    group: "{{usergroup['name']}}"
    path: "{{item[0]['home']|default(users_defaults['home'])}}/{{item[0]['name']}}/{{item[1]}}"
    state: directory
    mode: 0700
  with_nested:
    - "{{users}}"
    - "{{users_defaults['skel']}}"
  when: users_skel_homedir or item[0]['skel_homedir']|default(False)

##############################
# password expiration
##############################

- block:
  # passwd implentation seems different on RedHat vs Debian.
  # On centos 7.* for instance we get:
  #       passwd: Cannot mix one of - l, -u, -d, -S and one of -i, -n, -w, -x.
  # When mixing --expire and --inactive options.
  # --expire is Available to root only.

  # - name: force expiration of new user's password on RedHat derivative nodes
  #   command: passwd --expire {{item.item['name']}}
  #   with_items: "{{new_users['results']}}"
  #   when: ansible_os_family != "RedHat" and item.changed

  - name: force expiration of new user's password on Debian derivative nodes
    command: passwd --expire {{item.item['name']}}
    # command: passwd --expire {{item['item']['name']}} --inactive {{item['item']['inactive']|default(users_defaults['inactive'])}}
    with_items: "{{new_users['results']}}"
    when: ansible_os_family == "Debian" and item.changed

  when: users_expire_passwords

# run ansible with "-e 'groupadd_debug=True'
- include: groupadd_debug.yml
  when: groupadd_debug

##############################
# ssh keys
##############################

# fetch keys generated by the user module
- include: fetch_ssh_keys.yml
  when: users_generate_ssh_keys

  # gather various ssh facts
  #   - active_ssh_keys
  #   - managed_ssh_keys
  #   - new_ssh_keys
- include: ssh_setup.yml
  when: users_generate_ssh_keys or users_rotate_ssh_keys

  # cleanup unmanaged keys and perform ssh_rotation
- include: ssh_rotate_keys.yml
  when: users_rotate_ssh_keys

  # generate ssh keys
- include: ssh_keygen.yml
  when: users_generate_ssh_keys

  # fetch missing pub keys again prior to propagation of public keys
- include: fetch_ssh_keys.yml
  static: no
  when: users_generate_ssh_keys and generate_new_ssh_keys|changed

- include: deploy_ssh_keys.yml
  when: ansible_connection != 'local'

  # ssh_config
- include: ssh_config.yml

#############################
# dotfiles
#############################
- include: dotfiles.yml

#############################
# users deletion
#############################

# Delete all unmanaged users. We can only put this here to avoid reparsing
# file "{{groups_dir}}/{{usergroup['name']}}/users.yml" a second time.

- block:

  - name: delete unmanaged users
    # user:
    debug:
      msg: "deleted user is {{item}}"
    #   # account name
    #   name: "{{item}}"
    #   # userdel --remove behavior (Files in the user's home directory will be
    #   # removed along with the home directory itself and the user's mail spool)
    #   remove: yes
    with_items: "{{ansible_usergroups[usergroup['name']]['users']}}"
    # ignore errors when usergroup['name'] doesn't exist (no unix group => dangling users)
    ignore_errors: yes
    when:  (users_exclusive_groupmembers and item not in users|map(attribute='name')|list)

#     delete dangling users
#   rescue:
#     - debug:
#         var: userdel_errors
